{

  "Firestore": {"getInstance()": "firestore()",
    "Collection(String)": "collection(/0)"},
  "Auth": {"getInstance()": "auth()","getCurrentUser()": "currentUser",
    "createUserWithEmailAndPassword(String,String)": "createUser(withEmail: /0, password: /1)",
    "signInWithEmailAndPassword(String,String)": "signIn(withEmail: /0, password: /1)",
    "sendPasswordResetEmail(String)": "sendPasswordReset(withEmail: /0)","setLanguageCode(String)": "languageCode = /0",
    "signInAnonymously()": "signInAnonymously"

  },

  "FIRUser": {"getEmail()": "email","getUid()": "uid","getPhotoUrl()": "photoURL","sendEmailVerification()": "sendEmailVerification()",
    "updatePassword(String)": "updatePassword(to: /0)","delete()": "delete","reauthenticate(AuthCredential)":"reauthenticate(with: /0)"
  },

  "CollectionReference": {"add(Map<String,Object>)": "addDocument(/0)","add(Map<String,String>)": "addDocument(/0)","add(Map<String,int>)": "addDocument(/0)",
    "add(Map<String,float>)": "addDocument(/0)",
    "set(Map<String,Object>)": "setData(/0)",
    "Document()": "document()",
    "Document(String)": "document(/0)",
    "get()": "getDocuments()",
    "whereEqualTo(String,String)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,int)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,boolean)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,double)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,float)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,ArrayList<String>)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,ArrayList<int>)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,ArrayList<float>)": "whereField(/0,isEqualTo:/1)",
    "whereEqualTo(String,ArrayList<Object>)": "whereField(/0,isEqualTo:/1)",
    "whereLessThan(String,String)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,int)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,boolean)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,double)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,float)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,ArrayList<String>)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,ArrayList<int>)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,ArrayList<float>)": "whereField(/0, isLessThan: /1)",
    "whereLessThan(String,ArrayList<Object>)": "whereField(/0, isLessThan: /1)",
    "whereGreaterThanOrEqualTo(String,String)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,int)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,boolean)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,double)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,float)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,ArrayList<String>)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,ArrayList<int>)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,ArrayList<float>)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereGreaterThanOrEqualTo(String,ArrayList<Object>)":"whereField(/0,isGreaterThanOrEqualTo: /1)",
    "whereNotEqualTo(String,String)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,int)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,boolean)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,double)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,float)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,ArrayList<String>)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,ArrayList<int>)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,ArrayList<float>)": "whereField(/0,isNotEqualTo: /1)",
    "whereNotEqualTo(String,ArrayList<Object>)": "whereField(/0,isNotEqualTo: /1)",
    "whereArrayContains(String,String)": "whereField(/0,arrayContains: /1)",
    "whereArrayContainsAny(String,Arrays)": "whereField(/0,arrayContainsAny: /1)",
    "orderBy(String)": "order(by: /0)","limit(int)": "limit(to: /0)"
  },
  "DocumentReference": {
    "get()": "getDocument()",
    "set(Map<String,Object>)": "setData(/0)",
    "set(Map<String,String>)": "setData(/0)",
    "set(Map<String,int>)": "setData(/0)",
    "set(Map<String,float>)": "setData(/0)",
    "getId()" : "documentID",
    "addSnapshotListener": "addSnapshotListener"
  },
  "Query": {
    "limit(int)": "limit(to: /0)",
    "get()": "getDocuments()"

  },
  "DocumentSnapshot": {
    "getResult()": "!",
    "set(Map<String,Object>)": "setData(/0)",
    "set(Map<String,String>)": "setData(/0)",
    "set(Map<String,int>)": "setData(/0)",
    "set(Map<String,float>)": "setData(/0)",
    "isSuccessful()": " != nil",
    "delete()": "delete()",
    "exists()": "exists()",
    "getData()": "data()"
  },
  "QuerySnapshot": {
    "getResult()": "documents",
    "set(Map<String,Object>)": "setData(/0)",
    "set(Map<String,String>)": "setData(/0)",
    "set(Map<String,int>)": "setData(/0)",
    "set(Map<String,float>)": "setData(/0)",
    "isSuccessful()": " != nil",
    "delete()": "delete()"
  },
  "Void": {
    "isSuccessful()": " != nil"
  },
  "FIRAuthDataResult": {
    "isSuccessful()": " != nil"
  },

  "Array":{"add(Object)":"append(/0)",
    "add(int,Object)":"insert(/1, at: /0)","size()":"count",
    "isEmpty()": "isEmpty"},
  "AVAudioPlayer":{"start()":"play()"},
  "UIViewController":{"onCreate(Bundle)":"viewDidLoad()"},
  "UITextField": {"toString()": "text!", "length()": "text!.count","getText()":""},
  "UIButton": {"setText(String)": "setTitle(/0, for: .normal)"},
  "UILabel": {"setText(String)": "text = /0", "setText(int)": "text = /0" ,"setText(null)": "text = nil", "getText()": "text!"},
  "String":{"length()":"count", "toString()": ""},
  "UIImageView": {"setImageBitmap(Bitmap)": "image = /0"},
  "UserDefaults.standard": {"putString(String,String)": "setValue(/1, forKey: /0)",
    "getString(String,String)": "string(forKey: /0) else { return /1 }", "apply()": ""}
}